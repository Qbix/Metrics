/**
 * Autogenerated base class for the Metrics model.
 * 
 * Don't change this file, since it can be overwritten.
 * Instead, change the Metrics.js file.
 *
 * @module Metrics
 */
var Q = require('Q');
var Db = Q.require('Db');

/**
 * Base class for the Metrics model
 * @namespace Base
 * @class Metrics
 * @static
 */
function Base () {
	return this;
}
 
module.exports = Base;

/**
 * The list of model classes
 * @property tableClasses
 * @type array
 */
Base.tableClasses = [
	"Metrics_Action",
	"Metrics_Conversion",
	"Metrics_Hit",
	"Metrics_Tracker",
	"Metrics_TrackerTrait",
	"Metrics_Trait",
	"Metrics_Visit"
];

/**
 * This method calls Db.connect() using information stored in the configuration.
 * If this has already been called, then the same db object is returned.
 * @method db
 * @return {Db} The database connection
 */
Base.db = function () {
	return Db.connect('Metrics');
};

/**
 * The connection name for the class
 * @method connectionName
 * @return {string} The name of the connection
 */
Base.connectionName = function() {
	return 'Metrics';
};

/**
 * Link to Metrics.Action model
 * @property Action
 * @type Metrics.Action
 */
Base.Action = Q.require('Metrics/Action');

/**
 * Link to Metrics.Conversion model
 * @property Conversion
 * @type Metrics.Conversion
 */
Base.Conversion = Q.require('Metrics/Conversion');

/**
 * Link to Metrics.Hit model
 * @property Hit
 * @type Metrics.Hit
 */
Base.Hit = Q.require('Metrics/Hit');

/**
 * Link to Metrics.Tracker model
 * @property Tracker
 * @type Metrics.Tracker
 */
Base.Tracker = Q.require('Metrics/Tracker');

/**
 * Link to Metrics.TrackerTrait model
 * @property TrackerTrait
 * @type Metrics.TrackerTrait
 */
Base.TrackerTrait = Q.require('Metrics/TrackerTrait');

/**
 * Link to Metrics.Trait model
 * @property Trait
 * @type Metrics.Trait
 */
Base.Trait = Q.require('Metrics/Trait');

/**
 * Link to Metrics.Visit model
 * @property Visit
 * @type Metrics.Visit
 */
Base.Visit = Q.require('Metrics/Visit');
